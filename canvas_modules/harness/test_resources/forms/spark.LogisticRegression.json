{
  "titleDefinition": {
    "title": "Logistic Regression"
  },
  "current_parameters": {
    "targetField": [],
    "inputFieldList": [],
    "elasticNetParam": 0,
    "fitIntercept": false,
    "maxIter": 75,
    "regParam": 0.1,
    "standardization": true,
    "threshold": 0.5,
    "tol": 0.000001
  },
  "parameters": [
    {
      "id": "targetField",
      "type": "string",
      "default": "",
      "role": "column",
      "required": true
    },
    {
      "id": "inputFieldList",
      "type": "array[string]",
      "default": [],
      "role": "column",
      "required": true
    },
    {
      "id": "elasticNetParam",
      "type": "double",
      "default": 0
    },
    {
      "id": "fitIntercept",
      "type": "boolean",
      "default": true
    },
    {
      "id": "maxIter",
      "type": "integer",
      "default": 100
    },
    {
      "id": "regParam",
      "type": "double",
      "default": 0
    },
    {
      "id": "standardization",
      "type": "boolean",
      "default": true
    },
    {
      "id": "threshold",
      "type": "double",
      "default": 0.5
    },
    {
      "id": "tol",
      "type": "double",
      "default": 0.000001
    }
  ],
  "uihints": {
    "id": "org.apache.spark.ml.classification.LogisticRegression",
    "icon": "images/modelbuildspark.svg",
    "label": {
      "default": "Logistic Regression"
    },
    "description": {
      "default": "Fit a Logistic Regression Model"
    },
    "parameter_info": [
      {
        "parameter_ref": "targetField",
        "label": {
          "default": "Target column"
        },
        "description": {
          "default": "Select a target column"
        }
      },
      {
        "parameter_ref": "inputFieldList",
        "label": {
          "default": "Input columns"
        },
        "description": {
          "default": "Select one or more input columns"
        }
      },
      {
        "parameter_ref": "elasticNetParam",
        "label": {
          "default": "Elastic net parameter"
        },
        "description": {
          "default": "Elastic net mixing parameter (>= 0 and  <= 1). For alpha = 0, the penalty is an L2 penalty. For alpha = 1, it is an L1 penalty"
        }
      },
      {
        "parameter_ref": "fitIntercept",
        "label": {
          "default": "Fit intercept"
        },
        "description": {
          "default": "Whether to fit an intercept term"
        }
      },
      {
        "parameter_ref": "maxIter",
        "label": {
          "default": "Maximum iterations for convergence"
        },
        "description": {
          "default": "Maximum iterations for convergence (>= 0)"
        }
      },
      {
        "parameter_ref": "regParam",
        "label": {
          "default": "Regularization parameter"
        },
        "description": {
          "default": "Regularization parameter (>= 0)"
        }
      },
      {
        "parameter_ref": "standardization",
        "label": {
          "default": "Standardization"
        },
        "description": {
          "default": "Whether to standardize the training features before fitting the model"
        }
      },
      {
        "parameter_ref": "threshold",
        "label": {
          "default": "Threshold"
        },
        "description": {
          "default": "Threshold in binary classification prediction (>= 0 and  <= 1)"
        }
      },
      {
        "parameter_ref": "tol",
        "label": {
          "default": "Tolerance"
        },
        "description": {
          "default": "The convergence tolerance for iterative algorithms"
        }
      }
    ],
    "group_info": [
      {
        "id": "fields",
        "type": "columnSelection",
        "label": {
          "default": "Fields"
        },
        "parameter_refs": [
          "targetField",
          "inputFieldList"
        ]
      },
      {
        "id": "advancedParams",
        "label": {
          "default": "Advanced Parameters"
        },
        "parameter_refs": [
          "elasticNetParam",
          "fitIntercept",
          "maxIter",
          "regParam",
          "standardization",
          "threshold",
          "tol"
        ]
      }
    ]
  },
  "conditions": [
    {
      "validation": {
        "fail_message": {
          "type": "error",
          "focus_parameter_ref": "inputFieldList",
          "message": {
            "resource_key": "input_field_list_not_empty"
          }
        },
        "evaluate": {
          "condition": {
            "parameter_ref": "inputFieldList",
            "op": "isNotEmpty"
          }
        }
      }
    },
    {
      "validation": {
        "fail_message": {
          "type": "error",
          "focus_parameter_ref": "targetField",
          "message": {
            "resource_key": "target_field_not_empty"
          }
        },
        "evaluate": {
          "condition": {
            "parameter_ref": "targetField",
            "op": "isNotEmpty"
          }
        }
      }
    },
    {
      "validation": {
        "fail_message": {
          "type": "error",
          "focus_parameter_ref": "elasticNetParam",
          "message": {
            "resource_key": "elastic_net_param_not_valid"
          }
        },
        "evaluate": {
          "and": [
            {
              "or": [
                {
                  "condition": {
                    "parameter_ref": "elasticNetParam",
                    "op": "greaterThan",
                    "value": 0
                  }
                },
                {
                  "condition": {
                    "parameter_ref": "elasticNetParam",
                    "op": "equals",
                    "value": 0
                  }
                }
              ]
            },
            {
              "or": [
                {
                  "condition": {
                    "parameter_ref": "elasticNetParam",
                    "op": "lessThan",
                    "value": 1
                  }
                },
                {
                  "condition": {
                    "parameter_ref": "elasticNetParam",
                    "op": "equals",
                    "value": 1
                  }
                }
              ]
            }
          ]
        }
      }
    },
    {
      "validation": {
        "fail_message": {
          "type": "error",
          "focus_parameter_ref": "maxIter",
          "message": {
            "resource_key": "max_iter_not_valid"
          }
        },
        "evaluate": {
          "or": [
            {
              "condition": {
                "parameter_ref": "maxIter",
                "op": "greaterThan",
                "value": 0
              }
            },
            {
              "condition": {
                "parameter_ref": "maxIter",
                "op": "equals",
                "value": 0
              }
            }
          ]
        }
      }
    },
    {
      "validation": {
        "fail_message": {
          "type": "error",
          "focus_parameter_ref": "regParam",
          "message": {
            "resource_key": "reg_param_not_valid"
          }
        },
        "evaluate": {
          "or": [
            {
              "condition": {
                "parameter_ref": "regParam",
                "op": "greaterThan",
                "value": 0
              }
            },
            {
              "condition": {
                "parameter_ref": "regParam",
                "op": "equals",
                "value": 0
              }
            }
          ]
        }
      }
    },
    {
      "validation": {
        "fail_message": {
          "type": "error",
          "focus_parameter_ref": "threshold",
          "message": {
            "resource_key": "threshold_param_not_valid"
          }
        },
        "evaluate": {
          "and": [
            {
              "or": [
                {
                  "condition": {
                    "parameter_ref": "threshold",
                    "op": "greaterThan",
                    "value": 0
                  }
                },
                {
                  "condition": {
                    "parameter_ref": "threshold",
                    "op": "equals",
                    "value": 0
                  }
                }
              ]
            },
            {
              "or": [
                {
                  "condition": {
                    "parameter_ref": "threshold",
                    "op": "lessThan",
                    "value": 1
                  }
                },
                {
                  "condition": {
                    "parameter_ref": "threshold",
                    "op": "equals",
                    "value": 1
                  }
                }
              ]
            }
          ]
        }
      }
    }
  ],
  "dataset_metadata": [
		{
	    "fields": [
	      {
	        "name": "Age",
	        "type": "integer",
	        "metadata": {
	          "description": "",
	          "measure": "range",
	          "modeling_role": "input"
	        }
	      },
	      {
	        "name": "Sex",
	        "type": "string",
	        "metadata": {
	          "description": "",
	          "measure": "discrete",
	          "modeling_role": "input"
	        }
	      },
	      {
	        "name": "BP",
	        "type": "string",
	        "metadata": {
	          "description": "",
	          "measure": "discrete",
	          "modeling_role": "input"
	        }
	      },
	      {
	        "name": "Cholesterol",
	        "type": "string",
	        "metadata": {
	          "description": "",
	          "measure": "discrete",
	          "modeling_role": "input"
	        }
	      },
	      {
	        "name": "Na",
	        "type": "double",
	        "metadata": {
	          "description": "",
	          "measure": "range",
	          "modeling_role": "input"
	        }
	      },
	      {
	        "name": "K",
	        "type": "double",
	        "metadata": {
	          "description": "",
	          "measure": "range",
	          "modeling_role": "input"
	        }
	      },
	      {
	        "name": "Drug",
	        "type": "string",
	        "metadata": {
	          "description": "",
	          "measure": "discrete",
	          "modeling_role": "input"
	        }
	      }
	    ]
	  }
	],
  "resources": {
    "org.apache.spark.ml.regression.LinearRegression.label": "Logistic Regression",
    "org.apache.spark.ml.regression.LinearRegression.desc": "Fit a Logistic Regression Model",
    "inputFieldList.label": "Input columns",
    "inputFieldList.desc": "Select one or more input columns",
    "targetField.label": "Target column",
    "targetField.desc": "Select a target column",
    "elasticNetParam.label": "Elastic net parameter",
    "elasticNetParam.desc": "Elastic net mixing parameter (>= 0 and  <= 1). For alpha = 0, the penalty is an L2 penalty. For alpha = 1, it is an L1 penalty",
    "fitIntercept.label": "Fit intercept",
    "fitIntercept.desc": "Whether to fit an intercept term",
    "maxIter.label": "Maximum iterations for convergence",
    "maxIter.desc": "Maximum iterations for convergence (>= 0)",
    "regParam.label": "Regularization parameter",
    "regParam.desc": "Regularization parameter (>= 0)",
    "threshold.label": "Solver",
    "threshold.desc": "Threshold in binary classification prediction (>= 0 and  <= 1)",
    "standardization.label": "Standardization",
    "standardization.desc": "Whether to standardize the training features before fitting the model",
    "tol.label": "Tolerance",
    "tol.desc": "The convergence tolerance for iterative algorithms",
    "weightCol.label": "Weight column",
    "weightCol.desc": "Weight column name. If this is not set or empty, all instance weights sre treated as 1.0.",
    "fields.label": "Fields",
    "advancedParams.label": "Advanced Parameters",
    "input_field_list_not_empty": "Select one or more input fields",
    "solver_not_empty": "The Solver value cannot be empty",
    "target_field_not_empty": "Select a target field",
    "elastic_net_param_not_valid": "The elastic net parameter value must be >= 0 and <= 1",
    "max_iter_not_valid": "Max iterations must be greater than or equal to zero",
    "reg_param_not_valid": "The regularization parameter must be greater than or equal to zero",
    "threshold_param_not_valid": "The threshold parameter value must be >= 0 and <= 1"
  }
}
