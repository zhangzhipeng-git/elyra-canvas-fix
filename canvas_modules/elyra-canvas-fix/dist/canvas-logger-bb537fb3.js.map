{"version":3,"file":"canvas-logger-bb537fb3.js","sources":["../src/logging/canvas-logger.js"],"sourcesContent":["/*\n * Copyright 2017-2022 Elyra Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint no-console: [\"error\", { allow: [\"log\", \"info\", \"warn\", \"error\", \"time\", \"timeEnd\"] }] */\n\nexport default class Logger {\n\n\t// prefix can be either a string or an array of string. The prefix(s) are\n\t// displayed at the beginning of any console messgae sepearated from the\n\t// message (and from each orther) by a dash.\n\tconstructor(prefix) {\n\t\tthis.prefix = prefix;\n\t}\n\n\t// Displays a message in the console as either a formatted string or as\n\t// an object.\n\tlog(msg) {\n\t\tif (Logger.active) {\n\t\t\tif (typeof msg === \"string\") {\n\t\t\t\tconsole.info(this.getMessage(\"\", msg));\n\t\t\t} else {\n\t\t\t\tconsole.info(msg);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Logs the message provided and starts a timer.\n\tlogStartTimer(msg) {\n\t\tif (Logger.active) {\n\t\t\tconst startMsg = this.getStartMessage(\"\", msg);\n\t\t\tconst endMsg = this.getEndMessage(\"\", msg);\n\t\t\tconsole.info(startMsg);\n\t\t\tconsole.time(endMsg);\n\t\t}\n\t}\n\n\t// Logs the message provided. If the message is exactly the same as a message\n\t// provided in a previous logStartTime() call then the execution time from\n\t// start to finish is added to the end of the message. Also, this method\n\t// optionally allows the display of a separator when displaySeparator is set\n\t// to true.\n\tlogEndTimer(msg, displaySeparator) {\n\t\tif (Logger.active) {\n\t\t\tconst endMsg = this.getEndMessage(\"\", msg);\n\t\t\tconsole.timeEnd(endMsg);\n\t\t\tif (displaySeparator) {\n\t\t\t\tconsole.info(\"--------------------------------------------------\");\n\t\t\t}\n\t\t}\n\t}\n\n\tdebug(msg) {\n\t\tif (Logger.active) {\n\t\t\tconsole.log(this.getMessage(\"DEBUG\", msg));\n\t\t}\n\t}\n\n\twarn(msg) {\n\t\t// Always write warnings to the console regardless of whether Logger.active is true or not\n\t\tconsole.warn(this.getMessage(\"WARNING\", msg));\n\t}\n\n\terror(msg) {\n\t\t// Always write errors to the console regardless of whether Logger.active is true or not\n\t\tconsole.error(this.getMessage(\"ERROR\", msg));\n\t}\n\n\tgetStartMessage(type, msg) {\n\t\treturn this.getMessage(type, msg) + \" - start\";\n\t}\n\n\tgetEndMessage(type, msg) {\n\t\treturn this.getMessage(type, msg) + \" - end\";\n\t}\n\n\t// Adds a message to the console with the following format:\n\t// [type] prefix[0] - prefix[1] - prefix[2] - msg\n\t// Any prefixes are abbreviate to a maximum of 20 characters.\n\tgetMessage(type, msg) {\n\t\tlet str = \"\";\n\t\tif (type) {\n\t\t\tstr += \"[\" + type + \"] \";\n\t\t}\n\n\t\tif (typeof this.prefix === \"string\") {\n\t\t\tstr += this.abbreviate(this.prefix) + \" - \";\n\t\t} else {\n\t\t\tfor (let idx = 0; idx < this.prefix.length; idx++) {\n\t\t\t\tstr += this.abbreviate(this.prefix[idx]) + \" - \";\n\t\t\t}\n\t\t}\n\n\t\treturn str + msg;\n\t}\n\n\tabbreviate(idStr) {\n\t\tif (idStr && idStr.length > 20) {\n\t\t\treturn idStr.substr(0, 17) + \"...\";\n\t\t}\n\t\treturn idStr;\n\t}\n\n\tstatic getLoggingState() {\n\t\treturn Logger.active;\n\t}\n\n\tstatic setLoggingState(state) {\n\t\tLogger.active = state;\n\t}\n\n\tstatic switchLoggingState() {\n\t\tif (Logger.active) {\n\t\t\tnew Logger(\"Logger\").log(\"Switching canvas logging off\");\n\t\t\tLogger.active = false;\n\t\t} else {\n\t\t\tLogger.active = true;\n\t\t\tnew Logger(\"Logger\").log(\"Switching canvas logging on\");\n\t\t}\n\t}\n}\n\n// Static variable can be switched on and off by pressing Ctrl+Shift+Option+P\nLogger.active = false;\n"],"names":["Logger","prefix","_classCallCheck","this","_createClass","key","value","msg","active","console","info","getMessage","startMsg","getStartMessage","endMsg","getEndMessage","time","displaySeparator","timeEnd","log","warn","error","type","str","abbreviate","idx","length","idStr","substr","state"],"mappings":"wDAiBqBA,aAKpB,SAAAA,EAAYC,GAAQC,uBAAAF,GACnBG,KAAKF,OAASA,EA2Gd,OAvGDG,eAAAJ,IAAAK,UAAAC,MACA,SAAIC,GACCP,EAAOQ,SACS,iBAARD,EACVE,QAAQC,KAAKP,KAAKQ,WAAW,GAAIJ,IAEjCE,QAAQC,KAAKH,OAKhBF,oBAAAC,MACA,SAAcC,GACb,GAAIP,EAAOQ,OAAQ,CAClB,IAAMI,EAAWT,KAAKU,gBAAgB,GAAIN,GACpCO,EAASX,KAAKY,cAAc,GAAIR,GACtCE,QAAQC,KAAKE,GACbH,QAAQO,KAAKF,OAQfT,kBAAAC,MACA,SAAYC,EAAKU,GAChB,GAAIjB,EAAOQ,OAAQ,CAClB,IAAMM,EAASX,KAAKY,cAAc,GAAIR,GACtCE,QAAQS,QAAQJ,GACZG,GACHR,QAAQC,KAAK,0DAGfL,YAAAC,MAED,SAAMC,GACDP,EAAOQ,QACVC,QAAQU,IAAIhB,KAAKQ,WAAW,QAASJ,OAEtCF,WAAAC,MAED,SAAKC,GAEJE,QAAQW,KAAKjB,KAAKQ,WAAW,UAAWJ,OACxCF,YAAAC,MAED,SAAMC,GAELE,QAAQY,MAAMlB,KAAKQ,WAAW,QAASJ,OACvCF,sBAAAC,MAED,SAAgBgB,EAAMf,GACrB,OAAOJ,KAAKQ,WAAWW,EAAMf,GAAO,cACpCF,oBAAAC,MAED,SAAcgB,EAAMf,GACnB,OAAOJ,KAAKQ,WAAWW,EAAMf,GAAO,YAKrCF,iBAAAC,MACA,SAAWgB,EAAMf,GAChB,IAAIgB,EAAM,GAKV,GAJID,IACHC,GAAO,IAAMD,EAAO,MAGM,iBAAhBnB,KAAKF,OACfsB,GAAOpB,KAAKqB,WAAWrB,KAAKF,QAAU,WAEtC,IAAK,IAAIwB,EAAM,EAAGA,EAAMtB,KAAKF,OAAOyB,OAAQD,IAC3CF,GAAOpB,KAAKqB,WAAWrB,KAAKF,OAAOwB,IAAQ,MAI7C,OAAOF,EAAMhB,KACbF,iBAAAC,MAED,SAAWqB,GACV,OAAIA,GAASA,EAAMD,OAAS,GACpBC,EAAMC,OAAO,EAAG,IAAM,MAEvBD,OACPtB,sBAAAC,MAED,WACC,OAAON,EAAOQ,UACdH,sBAAAC,MAED,SAAuBuB,GACtB7B,EAAOQ,OAASqB,KAChBxB,yBAAAC,MAED,WACKN,EAAOQ,QACV,IAAIR,EAAO,UAAUmB,IAAI,gCACzBnB,EAAOQ,QAAS,IAEhBR,EAAOQ,QAAS,EAChB,IAAIR,EAAO,UAAUmB,IAAI,oCAE1BnB,CAAA,IAIFA,EAAOQ,QAAS"}