"use strict";var e=require("./createClass-826941b3.js"),t=require("./en-7cc24212.js"),i=require("./isArrayLikeObject-694e2d20.js"),r=t._assignValue,n=i._castPath,a=i._isIndex,o=i.isObject_1,s=i._toKey;var d=function(e,t,i,d){if(!o(e))return e;for(var c=-1,p=(t=n(t,e)).length,l=p-1,u=e;null!=u&&++c<p;){var m=s(t[c]),f=i;if("__proto__"===m||"constructor"===m||"prototype"===m)return e;if(c!=l){var y=u[m];void 0===(f=d?d(y,m,u):void 0)&&(f=o(y)?y:a(t[c+1])?[]:{})}r(u,m,f),u=u[m]}return e},c=function(){function t(){e._classCallCheck(this,t)}return e._createClass(t,[{key:"do",value:function(){}},{key:"undo",value:function(){}},{key:"redo",value:function(){}},{key:"getLabel",value:function(){}}]),t}(),p=d;var l=function(e,t,i){return null==e?e:p(e,t,i)};var u=function(){},m=i._Set,f=u,y=i._setToArray,h=m&&1/y(new m([,-0]))[1]==1/0?function(e){return new m(e)}:f,b=i._SetCache,_=i._arrayIncludes,g=i._arrayIncludesWith,v=i._cacheHas,j=h,A=i._setToArray;var q=function(e,t,i){var r=-1,n=_,a=e.length,o=!0,s=[],d=s;if(i)o=!1,n=g;else if(a>=200){var c=t?null:j(e);if(c)return A(c);o=!1,n=v,d=new b}else d=t?[]:s;e:for(;++r<a;){var p=e[r],l=t?t(p):p;if(p=i||0!==p?p:0,o&&l==l){for(var u=d.length;u--;)if(d[u]===l)continue e;t&&d.push(l),s.push(p)}else n(d,l,i)||(d!==s&&d.push(l),s.push(p))}return s},x=i._baseFlatten,S=i._baseRest,I=q,w=i.isArrayLikeObject_1,k=S((function(e){return I(x(e,1,w,!0))}));function C(e,t){(null==t||t>e.length)&&(t=e.length);for(var i=0,r=new Array(t);i<t;i++)r[i]=e[i];return r}var M={$schema:"https://json-schema.org/draft-04/schema#",id:"https://api.dataplatform.ibm.com/schemas/common-pipeline/datarecord-metadata/datarecord-metadata-v3-schema.json",title:"Watson Data Platform Datarecord Metadata Schema",description:"Metadata schema for datarecords in the Watson Data Platform",type:"object",definitions:{record_schema:{description:"Description of a datarecord including column types and metadata",type:"object",properties:{id:{description:"Unique identifier",type:"string"},name:{description:"Name of datarecord",type:"string"},json_schema:{description:"Refers to the JSON schema used to validate documents of this type",enum:["https://api.dataplatform.ibm.com/schemas/common-pipeline/datarecord-metadata/datarecord-metadata-v3-schema.json"],type:"string"},type:{description:"Always 'struct' for datarecord schema",type:"string"},fields:{description:"Array of field definitions",type:"array",minItems:0,items:{$ref:"#/definitions/field"},uniqueItems:!0},struct_types:{description:"The list of custom struct types to be used as field types",type:"object",patternProperties:{".":{type:"object",properties:{fields:{description:"Array of field definitions",type:"array",minItems:0,items:{$ref:"#/definitions/field"},uniqueItems:!0}}}}}},required:["id","fields"]},field:{description:"Definition of a datarecord field",type:"object",properties:{name:{description:"Field name. Must be unique within the datarecord",type:"string"},type:{description:"Field type. Can be a primitive type (string, integer, double, date, time, timestamp, binary, boolean, array[type], map[type, type]. The type can also be a reference to a struct_type declaration.)",type:"string"},nullable:{description:"Whether or not one can place null values into the field",type:"boolean",default:!1},metadata:{$ref:"#/definitions/metadata"},app_data:{$ref:"#/definitions/app_data_def"}},required:["name","type"]},metadata:{description:"Additional field metadata",type:"object",properties:{description:{description:"Field description",type:"string"},measure:{description:"Field measurement level",enum:["range","discrete","flag","set","ordered-set","typeless","collection","geospatial","default"]},modeling_role:{description:"Field role for modeling",enum:["input","target","both","none","partition","split","frequency","record-id"]},max_length:{description:"Maximum length for fields. Length is unlimited when not present",type:"number"},min_length:{description:"Minimum length for fields",type:"number"},decimal_precision:{description:"Precision for decimal, time, and timestamp types",type:"number"},decimal_scale:{description:"Scale for decimal, time, and timestamp types",type:"number"},values:{description:"Array of unique categorical values for the column",type:"array",minItems:0,items:{description:"A value discovered in the data",type:["string","number","boolean"]},uniqueItems:!0},range:{description:"Minimum and maximum discovered values for scalar data",type:"object",properties:{min:{description:"Lowest value discovered in the data",type:["string","number"]},max:{description:"Highest value discovered in the data",type:["string","number"]}},required:["min","max"]},runtime_type:{description:"Type of runtime",type:"string"},is_key:{description:"A field is key",type:"boolean"},is_signed:{description:"Signed or Unsigned for number",type:"boolean"},item_index:{description:"Item record level",type:"number"},source_field_id:{description:"Source field for a target field",type:"string"}}},app_data_def:{description:"Object containing app-specific data",type:"object",properties:{},additionalProperties:!0}}};exports.Action=c,exports._baseSet=d,exports._baseUniq=q,exports._toConsumableArray=function(e){return function(e){if(Array.isArray(e))return C(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return C(e,t);var i=Object.prototype.toString.call(e).slice(8,-1);return"Object"===i&&e.constructor&&(i=e.constructor.name),"Map"===i||"Set"===i?Array.from(e):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?C(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()},exports.dataRecordMetadataV3Schema=M,exports.set_1=l,exports.union_1=k;
//# sourceMappingURL=datarecord-metadata-v3-schema-677aa8cc.js.map
