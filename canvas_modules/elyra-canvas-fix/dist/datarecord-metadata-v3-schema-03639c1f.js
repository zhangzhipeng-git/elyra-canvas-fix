import{a as e,_ as t}from"./createClass-be661622.js";import{e as i}from"./en-6c5e8bad.js";import{a as r,L as a,M as n,e as o,a0 as s,a1 as d,r as p,u as c,v as m,t as l,b as u,m as f,q as y}from"./isArrayLikeObject-7787005e.js";var h=i,b=r,g=a,v=n,_=o;var j=function(e,t,i,r){if(!v(e))return e;for(var a=-1,n=(t=b(t,e)).length,o=n-1,s=e;null!=s&&++a<n;){var d=_(t[a]),p=i;if("__proto__"===d||"constructor"===d||"prototype"===d)return e;if(a!=o){var c=s[d];void 0===(p=r?r(c,d,s):void 0)&&(p=v(c)?c:g(t[a+1])?[]:{})}h(s,d,p),s=s[d]}return e},A=function(){function i(){t(this,i)}return e(i,[{key:"do",value:function(){}},{key:"undo",value:function(){}},{key:"redo",value:function(){}},{key:"getLabel",value:function(){}}]),i}(),q=j;var w=function(e,t,i){return null==e?e:q(e,t,i)};var I=s,S=function(){},M=I&&1/d(new I([,-0]))[1]==1/0?function(e){return new I(e)}:S,k=p,x=c,$=m,D=l,F=M,L=d;var O=function(e,t,i){var r=-1,a=x,n=e.length,o=!0,s=[],d=s;if(i)o=!1,a=$;else if(n>=200){var p=t?null:F(e);if(p)return L(p);o=!1,a=D,d=new k}else d=t?[]:s;e:for(;++r<n;){var c=e[r],m=t?t(c):c;if(c=i||0!==c?c:0,o&&m==m){for(var l=d.length;l--;)if(d[l]===m)continue e;t&&d.push(m),s.push(c)}else a(d,m,i)||(d!==s&&d.push(m),s.push(c))}return s},P=u,T=O,C=y,U=f((function(e){return T(P(e,1,C,!0))}));function W(e,t){(null==t||t>e.length)&&(t=e.length);for(var i=0,r=new Array(t);i<t;i++)r[i]=e[i];return r}function N(e){return function(e){if(Array.isArray(e))return W(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return W(e,t);var i=Object.prototype.toString.call(e).slice(8,-1);return"Object"===i&&e.constructor&&(i=e.constructor.name),"Map"===i||"Set"===i?Array.from(e):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?W(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var E={$schema:"https://json-schema.org/draft-04/schema#",id:"https://api.dataplatform.ibm.com/schemas/common-pipeline/datarecord-metadata/datarecord-metadata-v3-schema.json",title:"Watson Data Platform Datarecord Metadata Schema",description:"Metadata schema for datarecords in the Watson Data Platform",type:"object",definitions:{record_schema:{description:"Description of a datarecord including column types and metadata",type:"object",properties:{id:{description:"Unique identifier",type:"string"},name:{description:"Name of datarecord",type:"string"},json_schema:{description:"Refers to the JSON schema used to validate documents of this type",enum:["https://api.dataplatform.ibm.com/schemas/common-pipeline/datarecord-metadata/datarecord-metadata-v3-schema.json"],type:"string"},type:{description:"Always 'struct' for datarecord schema",type:"string"},fields:{description:"Array of field definitions",type:"array",minItems:0,items:{$ref:"#/definitions/field"},uniqueItems:!0},struct_types:{description:"The list of custom struct types to be used as field types",type:"object",patternProperties:{".":{type:"object",properties:{fields:{description:"Array of field definitions",type:"array",minItems:0,items:{$ref:"#/definitions/field"},uniqueItems:!0}}}}}},required:["id","fields"]},field:{description:"Definition of a datarecord field",type:"object",properties:{name:{description:"Field name. Must be unique within the datarecord",type:"string"},type:{description:"Field type. Can be a primitive type (string, integer, double, date, time, timestamp, binary, boolean, array[type], map[type, type]. The type can also be a reference to a struct_type declaration.)",type:"string"},nullable:{description:"Whether or not one can place null values into the field",type:"boolean",default:!1},metadata:{$ref:"#/definitions/metadata"},app_data:{$ref:"#/definitions/app_data_def"}},required:["name","type"]},metadata:{description:"Additional field metadata",type:"object",properties:{description:{description:"Field description",type:"string"},measure:{description:"Field measurement level",enum:["range","discrete","flag","set","ordered-set","typeless","collection","geospatial","default"]},modeling_role:{description:"Field role for modeling",enum:["input","target","both","none","partition","split","frequency","record-id"]},max_length:{description:"Maximum length for fields. Length is unlimited when not present",type:"number"},min_length:{description:"Minimum length for fields",type:"number"},decimal_precision:{description:"Precision for decimal, time, and timestamp types",type:"number"},decimal_scale:{description:"Scale for decimal, time, and timestamp types",type:"number"},values:{description:"Array of unique categorical values for the column",type:"array",minItems:0,items:{description:"A value discovered in the data",type:["string","number","boolean"]},uniqueItems:!0},range:{description:"Minimum and maximum discovered values for scalar data",type:"object",properties:{min:{description:"Lowest value discovered in the data",type:["string","number"]},max:{description:"Highest value discovered in the data",type:["string","number"]}},required:["min","max"]},runtime_type:{description:"Type of runtime",type:"string"},is_key:{description:"A field is key",type:"boolean"},is_signed:{description:"Signed or Unsigned for number",type:"boolean"},item_index:{description:"Item record level",type:"number"},source_field_id:{description:"Source field for a target field",type:"string"}}},app_data_def:{description:"Object containing app-specific data",type:"object",properties:{},additionalProperties:!0}}};export{A,j as _,O as a,N as b,E as d,w as s,U as u};
//# sourceMappingURL=datarecord-metadata-v3-schema-03639c1f.js.map
